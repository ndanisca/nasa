<?php

namespace NasaBundle\Entity;

use Doctrine\ORM\EntityRepository;
use NasaBundle\ApiBridge\ApiClient;

/**
 * NeoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NeoRepository extends EntityRepository
{
    /**
     * @return array
     * @throws \Exception
     */
    public function getNeosObjects()
    {
        $qb = $this->createQueryBuilder('neo')
            ->where('neo.isHazardous = TRUE')
            ->getQuery();

        try {
            return $qb->getArrayResult();

        } catch (\Exception $e) {
            throw new \Exception($e->getMessage());
        }
    }

    /**
     * @param bool $isHazardous
     * @return array
     * @throws \Exception
     */
    public function getFastestObject($isHazardous = false)
    {
        $qb = $this->createQueryBuilder('neo')
                    ->select('neo.name')
                    ->where('neo.isHazardous = :isHazardous')
                    ->orderBy('neo.speed', 'DESC')
                    ->setParameter(':isHazardous', $isHazardous)
                    ->setMaxResults(1);
        try{
            return $qb->getQuery()->getSingleResult();

        } catch(\Exception $e){
            throw new \Exception($e->getMessage());
        }
    }

    /**
     * Have question related to this realization
     *
     * @param bool $isHazardous
     * @return array
     */
    public function getBestYear($isHazardous = false)
    {
        return [];
    }

    /**
     * Have question related to this realization
     *
     * @param bool $isHazardous
     * @return array
     */
    public function getBestMonth($isHazardous = false)
    {
        return [];
    }

    /**
     * @param $data
     * @return string
     */
    public function getCountNeos($data)
    {
        return $data['element_count'];
    }

    /**
     * @param array $data
     * @throws \Exception
     * @return bool
     */
    public function persistData(array $data)
    {
        /**
         * @var $entity Neo
         */
        //  check for expected array key in result array
        if(!isset($data['near_earth_objects']))
            throw new \Exception('Can\'t parse response data, array key \'near_earth_objects\' does\'nt exists in result array');

        foreach ($data['near_earth_objects'] as $date => $obj) {
            //  init NEO object date var
            $date = (new \DateTime())->modify($date);

            foreach ($obj as $info) {
                //  init NEO object speeds var
                $speed = current($info['close_approach_data'])['relative_velocity']['kilometers_per_hour'];

                //  create new instance of Neo entity
                $entity = new Neo();
                //  init object with given data
                $entity->setDate($date)
                        ->setReference($info['neo_reference_id'])
                        ->setName($info['name'])
                        ->setSpeed($speed)
                        ->setIsHazardous($info['is_potentially_hazardous_asteroid']);

                //  persist created object
                $this->_em->persist($entity);
            }
        }
        try{
            //  batch insertion in table
            $this->_em->flush();

            return true;

        } catch(\Exception $e){
            throw new \Exception($e->getMessage());
        }
    }
}
