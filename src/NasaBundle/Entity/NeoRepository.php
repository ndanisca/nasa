<?php

namespace NasaBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * NeoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NeoRepository extends EntityRepository
{
    /**
     * @return array
     * @throws \Exception
     */
    public function getNeosObjects()
    {
        //  create new instance of query builder
        //  building a query
        $qb = $this->createQueryBuilder('neo')
            ->where('neo.isHazardous = TRUE');

        try {
            //  converting qb instaince to Query object, get result of query
            return $qb->getQuery()->getArrayResult();

        } catch (\Exception $e) {
            //  thrown exception If the getArrayResult() call fails
            throw new \Exception($e->getMessage());
        }
    }

    /**
     * @param bool $isHazardous
     * @return array
     * @throws \Exception
     */
    public function getFastestObject($isHazardous = false)
    {
        $qb = $this->createQueryBuilder('neo')
            ->select('neo.name')
            ->where('neo.isHazardous = :isHazardous')
            ->orderBy('neo.speed', 'DESC')
            ->setParameter(':isHazardous', $isHazardous)
            ->setMaxResults(1);
        try {
            return $qb->getQuery()->getSingleResult();

        } catch (\Exception $e) {
            throw new \Exception($e->getMessage());
        }
    }

    /**
     * Get month with most count of NEOs
     *
     * @param bool $isHazardous
     * @throws \Exception
     * @return array
     */
    public function getBestYear($isHazardous = false)
    {
        //  cause function YEAR is not supported by Doctrine ->
        //  need to update entityManager conf with new extension we have added to make thinks work
        //  installed ext: "beberlei/DoctrineExtensions": "^1.0"
        $emConfig = $this->getEntityManager()->getConfiguration();
        $emConfig->addCustomDatetimeFunction('YEAR', 'DoctrineExtensions\Query\Mysql\Year');
        $qb = $this->createQueryBuilder('neo')
                    ->select('YEAR(neo.date) as year, COUNT(neo.date) as total')
                    ->where('neo.isHazardous = :isHazardous')
                    ->groupBy('year')
                    ->orderBy('total', 'DESC')
                    ->setParameter(':isHazardous', $isHazardous)
                    ->setMaxResults(1)
        ;

        try{
            return $qb->getQuery()->getSingleResult();

        } catch(\Exception $e){
            throw new \Exception($e->getMessage());
        }
    }

    /**
     * Get month with most count of NEOs
     *
     * @param bool $isHazardous
     * @throws \Exception
     * @return array
     */
    public function getBestMonth($isHazardous = false)
    {
        //  cause function MONTH is not supported by Doctrine ->
        //  need to update entityManager conf with new extension we have added to make thinks work
        //  installed ext: "beberlei/DoctrineExtensions": "^1.0"
        $emConfig = $this->getEntityManager()->getConfiguration();
        $emConfig->addCustomDatetimeFunction('MONTH', 'DoctrineExtensions\Query\Mysql\Month');

        $qb = $this->createQueryBuilder('neo')
            ->select('MONTH(neo.date) as month, COUNT(neo.date) as total')
            ->where('neo.isHazardous = :isHazardous')
            ->groupBy('month')
            ->orderBy('total', 'DESC')
            ->setParameter(':isHazardous', $isHazardous)
            ->setMaxResults(1)
        ;

        try{
            return $qb->getQuery()->getSingleResult();

        } catch(\Exception $e){
            throw new \Exception($e->getMessage());
        }
    }

    /**
     * Get the total count of NEOs objects
     *
     * @param $data
     * @return string
     */
    public function getCountNeos($data)
    {
        return $data['element_count'];
    }

    /**
     * @param array $data
     * @throws \Exception
     * @return bool
     */
    public function persistData(array $data)
    {
        /**
         * @var $entity Neo
         */
        //  check for expected array key in result array
        if(!isset($data['near_earth_objects']))
            throw new \Exception('Can\'t parse response data, array key \'near_earth_objects\' does\'nt exists in result array');

        foreach ($data['near_earth_objects'] as $date => $obj) {
            //  init NEO object date var
            $date = (new \DateTime())->modify($date);

            foreach ($obj as $info) {
                //  init NEO object speeds var
                $speed = current($info['close_approach_data'])['relative_velocity']['kilometers_per_hour'];

                //  create new instance of Neo class
                $entity = new Neo();
                //  initialize created object with data
                $entity->setDate($date)
                        ->setReference($info['neo_reference_id'])
                        ->setName($info['name'])
                        ->setSpeed($speed)
                        ->setIsHazardous($info['is_potentially_hazardous_asteroid']);

                //  managing the the entity object
                //  tell to entity manager about objects which are need to be persisted in db
                $this->getEntityManager()->persist($entity);
            }
        }
        try{
            //
            //   all of the objects that it's managing need to be persisted to the database
            //  executing the insertion in db

            $this->getEntityManager()->flush();

            return true;

        } catch(\Exception $e){
            //  thrown exception If the flush() call fails
            throw new \Exception($e->getMessage());
        }
    }
}
